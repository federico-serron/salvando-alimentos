from flask import Flask, request, jsonify, sessionfrom services.auth import authenticationfrom services.products import productServicefrom services.categories import categoryServicefrom services.orders import orderServicefrom services.ratings import ratingServicefrom services.paymethod import paymethodServiceapp = Flask(__name__)######################################## USERS ################################################### Creating a user@app.route('/signup', methods=['POST'])def create_user():    user_data = request.get_json()    if 'name' not in user_data:        return 'El nombre es requerido.', 412    elif 'lastname' not in user_data:        return 'El apellido es requerido.', 412    elif 'email' not in user_data:        return 'El email es requerido.', 412    elif 'role' not in user_data:        return 'El rol de usuario es requerido.', 412    elif 'password' not in user_data:        return 'Una contrasena es requerida.', 412    elif 'address' not in user_data:        return 'La direccion es requerida.', 412    elif 'country' not in user_data:        return 'El pais es requerido.', 412    else:        try:            user_info = authentication.create_user(user_data['name'], user_data['lastname'], user_data['email'],                                       user_data['password'], user_data['role'], user_data['address'],                                       user_data['country'], user_data['profile_photo_url'],                                       user_data['company_name'])        except Exception:            return "El usuario ya existe.", 412        return jsonify(user_info), 200# Listing users@app.route('/users')def list_users():    return jsonify(authentication.obtener_usuarios())# Listing a user@app.route('/users/<id_user>')def list_user(id_user):    try:        user = authentication.obtener_usuario(id_user)        return jsonify(user)    except Exception:        return "Usuario no encontrado.", 404# Update a user@app.route('/users/<id_user>', methods=['PUT'])def update_user(id_user):    user_data = request.get_json()    if 'name' not in user_data or user_data['name'] == '':        return "Debe ingresar un nombre para el usuario.", 412    elif 'password' not in user_data or user_data['password'] == '':        return "Debe ingresar una password para el usuario.", 412    else:        authentication.update_user(id_user, user_data['name'], user_data['lastname'], user_data['password'])        return "Los valores del usuario se han actualizado correctamente!", 200# Delete user@app.route('/users/<id_user>', methods=['DELETE'])def delete_user(id_user):    try:        authentication.delete_user(id_user)        return "El usuario se ha eliminado satisfactoriamente.", 200    except Exception:        return "El usuario que desea eliminar no existe.", 412# Login@app.route('/login', methods=['POST'])def user_login():    user_data = request.get_json()    if 'email' not in user_data:        return "Debe ingresar un usuario y/o contrasena", 412    elif 'password' not in user_data:        return "Debe ingresar un usuario y/o contrasena", 412    try:        return jsonify(authentication.user_login(user_data['email'], user_data['password'])), 200    except Exception:        return 'USUARIO NO ENCONTRADO', 404@app.route('/logout', methods=['POST'])def logout():    user_data = request.get_json()    if 'email' not in user_data:        return "Debe ingresar que usuario debe cerrar sesion.", 404    else:        id_user = authentication.get_id_user_email(user_data['email'])        authentication.delete_session(id_user['id'])    return "Sesion terminada exitosamente", 200# Counts all the CLIENT USERS@app.route('/users/clientcount', methods=['GET'])def client_count():    client_count = authentication.client_count()    return jsonify(client_count), 200# Counts all the SELLER USERS@app.route('/users/sellercount', methods=['GET'])def seller_count():    seller_count = authentication.seller_count()    return jsonify(seller_count), 200######################################## PRODUCTS ################################################### Create a product@app.route('/products', methods=['POST'])def create_product():    product_data = request.get_json()    if 'title' not in product_data or 'description' not in product_data or 'price' not in product_data:        return "Debe completar todos los campos", 412    else:        productService.create_product(product_data['title'], product_data['description'], product_data['price'],                                      product_data['expiring_date'], product_data['category_id'],                                      product_data['image_url'], product_data['available_quant'],                                      product_data['pickup_time'], product_data['slug'], product_data['status'],                                      product_data['user_id'])        return "Se cre√≥ el producto satisfactoriamente", 200# Listing all the products@app.route('/products')def list_products():    result = productService.list_products()    if len(result) == 0:        return "No se encontraron resultados para esta consulta.", 404    else:        return jsonify(result), 200# Listing specified quantity of products@app.route('/products/<quant>', methods=['GET'])def index_list_products(quant):    result = productService.index_list_products(quant)    if len(result) == 0:        return "No se encontraron resultados para esta consulta.", 404    else:        return jsonify(result), 200# Checks if USER owns specified PRODUCTS@app.route('/products/owns/<int:user_id>')def user_owns(user_id):    result = productService.user_owns(user_id)    if result:        return "Exito!", 200    else:        return "Falso", 412# Listing specified category of products@app.route('/products/category', methods=['POST'])def category_list_products():    category_id = request.get_json()    if 'category_id' not in category_id:        return "Debe especificar una categoria a buscar.", 404    else:        result = productService.category_list_products(category_id['category_id'])        if not result:            return "No se encontraron resultados para esta consulta.", 404        else:            return jsonify(result), 200# Updating a product@app.route('/products/<string:slug>', methods=['PUT'])def update_product(slug):    product_to_update = request.get_json()    if 'title' not in product_to_update:        return "Debe ingresar el nuevo titulo", 412    elif 'description' not in product_to_update:        return "Debe ingresar la nueva descripcion.", 412    elif 'price' not in product_to_update:        return "Debe ingresar el nuevo precio.", 412    elif 'expiring_date' not in product_to_update:        return "Debe ingresar una fecha de vencimiento.", 412    elif 'available_quant' not in product_to_update:        return "Debe ingresar una cantidad disponile.", 412    else:        productService.edit_product(product_to_update['product_id'], product_to_update['title'],                                    product_to_update['description'],                                    product_to_update['price'], product_to_update['expiring_date'],                                    product_to_update['available_quant'], slug, product_to_update['status'])        return "Se actualizo el registro correctamente.", 200# Delete a product@app.route('/products/<id_product>', methods=['DELETE'])def delete_product(id_product):    productService.delete_product(id_product)    return "El registro se ha eliminado correctamente.", 200# List a specific product by slug@app.route('/product/<string:slug>')def product_slug(slug):    result = productService.product_slug(slug)    if len(result) == 0:        return "No se encontraron resultados para esta consulta.", 404    else:        return jsonify(result), 200# List all the products of a specific user@app.route('/products/user', methods=['POST'])def list_user_products():    user_id = request.get_json()    result = productService.list_user_products(user_id['user_id'])    if len(result) == 0:        return "No se encontraron resultados para esta consulta.", 404    else:        return jsonify(result), 200# List all the EXPIRED products of a specific user@app.route('/products/user/expired', methods=['POST'])def list_user_expired_products():    user_id = request.get_json()    result = productService.list_user_expired_products(user_id['user_id'])    if len(result) == 0:        return "No se encontraron resultados para esta consulta.", 404    else:        return jsonify(result), 200# Counts all the ACTIVE Products@app.route('/products/count', methods=['GET'])def product_count():    product_qty = productService.product_count()    return jsonify(product_qty), 200######################################## CATEGORIES ################################################### Create category@app.route('/categories', methods=['POST'])def create_category():    category_data = request.get_json()    if 'name' not in category_data:        return "Debe ingresar un nombre para la categoria.", 412    else:        categoryService.create_category(category_data['name'])        return "Se ha creado la categoria correcamente!", 200# List categories@app.route('/categories', methods=['GET'])def list_categories():    return jsonify(categoryService.list_categories())# Update category@app.route('/categories/<id_category>', methods=['PUT'])def update_category(id_category):    new_data = request.get_json()    if 'name' not in new_data:        return "Debe ingresar el nuevo nombre de la categoria.", 412    categoryService.update_category(id_category, new_data['name'])    return "La categoria se ha cambiado correcamente!", 200# Delete category@app.route('/categories/<id_category>', methods=['DELETE'])def delete_category(id_category):    categoryService.delete_category(id_category)    return "La categoria se ha eliminado correcamente.", 200# Bring the name of a categor######################################## ORDERS ################################################### Create order@app.route('/orders', methods=['POST'])def create_order():    order_data = request.get_json()    if 'id' not in order_data:        return "Debe especificar que usuario hizo la orden", 412    elif 'products' not in order_data:        return "Debe ingresar el/los productos a comprar.", 412    elif 'payment_method' not in order_data:        return "Debe ingresar un metodo de pago.", 412    elif 'pickup_time' not in order_data:        return "Debe especificar un horario para retirar el producto.", 412    else:        orderService.create_order(order_data['id'], order_data['products'], order_data['payment_method'],                                  order_data['pickup_time'])        return "La orden se ha creado satisfactoriamente.", 200# List all the orders@app.route('/orders')def list_orders():    return jsonify(orderService.list_orders())# List all the orders of a specific user@app.route('/orders/<id_user>')def list_user_orders(id_user):    result = orderService.list_user_orders(id_user)    if not len(result) == 0:        return jsonify(result)    else:        return "El usuario especificado no tiene ninguna orden activa.", 412# Delete order@app.route('/orders/<id_order>', methods=['DELETE'])def delete_order(id_order):    orderService.delete_order(id_order)    return "La order seleccionada se la eliminado con exito.", 200# Counts all the ORDERS DONE@app.route('/orders/count', methods=['GET'])def order_count():    order_count = orderService.order_count()    return jsonify(order_count), 200######################################## RATINGS ################################################### Create rating@app.route('/ratings', methods=['POST'])def create_rating():    rating_data = request.get_json()    if 'user_id' not in rating_data:        return "Debe ingresar un usuario.", 412    if 'product_id' not in rating_data:        return "Debe ingresar a que producto pertenece la calaficacion.", 412    if 'rating' not in rating_data:        return "Debe ingresar una calificacion del 1 al 5", 412    if int(rating_data['rating']) > 5 or int(rating_data['rating'] < 0):        return "La calificacion debe estar entre 0 y 5.", 412    if ratingService.create_rating(rating_data['user_id'], rating_data['product_id'], rating_data['rating'],                                   rating_data['comment']):        return "Su calificacion se ha guardado correctamente!", 200    else:        return "El usuario que intenta comentar, no est√° registrado.", 412# List ratings@app.route('/ratings')def list_ratings():    return jsonify(ratingService.list_ratings())# Update rating@app.route('/ratings/<id_rating>', methods=['PUT'])def update_rating(id_rating):    rating_data = request.get_json()    if 'rating' not in rating_data:        return "Debe ingresar una calificacion.", 412    if 'comment' not in rating_data:        return "Debe ingresar un comentario.", 412    if 0 > int(rating_data['rating']) > 5:        return "La calificacion debe ser entre 0 y 5.", 412    if ratingService.update_rating(id_rating, rating_data['rating'], rating_data['comment']):        return "La calificacion se ha modificado correctamente!", 200    else:        return "No existe el comentario a modificar.", 404# Delete rating@app.route('/ratings/<id_rating>', methods=['DELETE'])def delete_rating(id_rating):    ratingService.delete_rating(id_rating)    return "La calificacion se ha eliminado correctamente.", 200######################################## PAYMENT METHODS ################################################### Create paymethod@app.route('/paymethods', methods=['POST'])def create_paymethod():    paymethod_data = request.get_json()    if 'name' not in paymethod_data:        return "Debe ingresar el nombre del metodo de pago.", 412    paymethodService.create_paymethod(paymethod_data['name'])    return "El nuevo metodo de pago se ha agregado satisfactoriamente!", 200# List paymethods@app.route('/paymethods')def list_paymethod():    result = paymethodService.list_paymethod()    return jsonify(result)# Update paymethods@app.route('/paymethods/<id_paymethod>', methods=['PUT'])def update_paymethod(id_paymethod):    paymethod_data = request.get_json()    if 'name' not in paymethod_data:        return "Debe especificar el nuevo nombre.", 412    paymethodService.update_paymethod(id_paymethod, paymethod_data['name'])    return "El metodo de pago se ha actualizado correctamente!", 200# Delete paymethod@app.route('/paymethods/<id_paymethod>', methods=['DELETE'])def delete_paymethod(id_paymethod):    paymethodService.delete_paymethod(id_paymethod)    return "El metodo de pago se ha eliminado correctamente.", 200if __name__ == '__main__':    app.run(debug=True, port=5001)